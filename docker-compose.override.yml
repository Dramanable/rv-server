# üöÄ Docker Compose Override - Memory Optimization for Development
# Optimise l'utilisation m√©moire en environnement de d√©veloppement

version: '3.9'

services:
  # =====================================
  # üèóÔ∏è APPLICATION SERVICE OPTIMIZATIONS
  # =====================================
  app:
    # Memory limits for the application
    mem_limit: 512m
    mem_reservation: 256m
    
    # CPU limits  
    cpus: '0.5'
    
    # Environment variables for memory optimization
    environment:
      # Node.js memory optimization
      - NODE_OPTIONS=--max-old-space-size=384
      - NPM_CONFIG_LOGLEVEL=warn
      - NODE_ENV=development
      
      # Disable source maps in development for memory
      - GENERATE_SOURCEMAP=false
      
      # NestJS optimizations
      - NEST_DEBUG=false
      - NEST_CLI_EXPERIMENTAL_FORK_TYPE_CHECKER=false
      
    # Health check optimization (less frequent)
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================  
  # üêò POSTGRES OPTIMIZATIONS
  # =====================================
  postgres:
    # Memory limits
    mem_limit: 256m
    mem_reservation: 128m
    
    # Optimized PostgreSQL configuration
    environment:
      # Memory-conscious settings
      - POSTGRES_INITDB_ARGS=--data-checksums
      
    command: >
      postgres 
      -c shared_buffers=64MB
      -c effective_cache_size=192MB
      -c maintenance_work_mem=16MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=2MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=1GB
      -c max_wal_size=2GB
      -c max_connections=50

  # =====================================
  # üü• REDIS OPTIMIZATIONS  
  # =====================================
  redis:
    # Memory limits
    mem_limit: 128m
    mem_reservation: 64m
    
    command: >
      redis-server 
      --maxmemory 96mb
      --maxmemory-policy allkeys-lru
      --save 900 1 300 10 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300

  # =====================================
  # üçÉ MONGODB OPTIMIZATIONS
  # =====================================
  mongodb:
    # Memory limits
    mem_limit: 256m
    mem_reservation: 128m
    
    command: >
      mongod 
      --wiredTigerCacheSizeGB 0.1
      --wiredTigerCollectionBlockCompressor snappy
      --wiredTigerIndexPrefixCompression true
      --quiet
      --logpath /dev/null

  # =====================================
  # üñ•Ô∏è PGADMIN OPTIMIZATIONS
  # =====================================  
  pgadmin:
    # Memory limits
    mem_limit: 128m
    mem_reservation: 64m
    
    environment:
      # Reduce pgAdmin memory usage
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      
# =====================================
# üìä GLOBAL NETWORK OPTIMIZATIONS
# =====================================
networks:
  default:
    driver: bridge
    driver_opts:
      # Optimize network for memory
      com.docker.network.driver.mtu: 1450
      
# =====================================
# üíæ VOLUME OPTIMIZATIONS
# =====================================      
volumes:
  postgres_data:
    driver: local
    driver_opts:
      # Optimize for development (less durability, more performance)
      type: tmpfs
      device: tmpfs
      o: size=200m,uid=1000
      
  mongodb_data:
    driver: local
    driver_opts:
      type: tmpfs  
      device: tmpfs
      o: size=100m,uid=1000
      
  redis_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs  
      o: size=50m,uid=1000

# =====================================
# üéØ MEMORY OPTIMIZATION SUMMARY
# =====================================

# TOTAL MEMORY ALLOCATION:
# - App: 512MB (main application)
# - PostgreSQL: 256MB (primary database)
# - MongoDB: 256MB (secondary database) 
# - Redis: 128MB (cache)
# - pgAdmin: 128MB (admin interface)
# - TOTAL: ~1.28GB (suitable for 4GB+ dev machines)

# OPTIMIZATIONS APPLIED:
# ‚úÖ Memory limits on all services
# ‚úÖ CPU limits to prevent resource hogging
# ‚úÖ Optimized database configurations
# ‚úÖ tmpfs volumes for development speed
# ‚úÖ Reduced logging and health check frequency
# ‚úÖ Node.js memory optimization flags

# DEVELOPMENT BENEFITS:
# ‚úÖ Faster startup times
# ‚úÖ Lower memory footprint  
# ‚úÖ Better laptop/desktop performance
# ‚úÖ Reduced thermal throttling
# ‚úÖ More resources for IDE and browser
