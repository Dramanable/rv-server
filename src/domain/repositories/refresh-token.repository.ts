/**
 * üîê DOMAIN REPOSITORY - Refresh Token Repository Interface
 *
 * Interface repository pour la gestion des tokens de rafra√Æchissement JWT.
 * D√©finit les contrats de persistance pour l'authentification s√©curis√©e.
 *
 * CLEAN ARCHITECTURE :
 * - Interface domaine pure (ind√©pendante de l'infrastructure)
 * - Impl√©mentation dans la couche infrastructure
 * - Utilis√©e par les Use Cases via injection de d√©pendance
 */

import { RefreshToken } from "../entities/refresh-token.entity";

export const REFRESH_TOKEN_REPOSITORY = "REFRESH_TOKEN_REPOSITORY";

export interface RefreshTokenRepository {
  /**
   * Sauvegarde un refresh token
   */
  save(token: RefreshToken): Promise<RefreshToken>;

  /**
   * Trouve un token par sa valeur hash√©e
   */
  findByToken(tokenHash: string): Promise<RefreshToken | null>;

  /**
   * Trouve tous les tokens d'un utilisateur
   */
  findByUserId(userId: string): Promise<RefreshToken[]>;

  /**
   * R√©voque tous les tokens d'un utilisateur
   */
  deleteByUserId(userId: string): Promise<void>;

  /**
   * R√©voque tous les tokens d'un utilisateur (alias pour deleteByUserId)
   */
  revokeAllByUserId(userId: string): Promise<void>;

  /**
   * R√©voque un token sp√©cifique
   */
  revokeByToken(tokenHash: string): Promise<void>;

  /**
   * Supprime tous les tokens expir√©s et r√©voqu√©s
   * @returns Nombre de tokens supprim√©s
   */
  deleteExpiredTokens(): Promise<number>;
}
