/**
 * üéØ TYPES DE CONTEXTE POUR PERMISSIONS GRANULAIRES
 * 
 * D√©finit les contextes et contraintes pour l'application des permissions
 * dans un syst√®me de gestion de rendez-vous professionnel.
 */

import { UserRole, Permission, BusinessType } from '../enums/user-role.enum';

/**
 * üè¢ Contexte Organisationnel
 */
export interface OrganizationalContext {
  readonly businessId: string;
  readonly businessType: BusinessType;
  readonly locationId?: string;     // Site sp√©cifique
  readonly departmentId?: string;   // D√©partement sp√©cifique
  readonly teamId?: string;         // √âquipe sp√©cifique
}

/**
 * üïê Contexte Temporel
 */
export interface TemporalContext {
  readonly timeWindow?: {
    start: Date;
    end: Date;
  };
  readonly dayOfWeek?: number[];    // 0-6 (Dimanche-Samedi)
  readonly timeOfDay?: {
    start: string;  // "HH:MM"
    end: string;    // "HH:MM"
  };
  readonly isEmergency?: boolean;   // Contexte d'urgence
}

/**
 * üé≠ Contexte Relationnel
 */
export interface RelationshipContext {
  readonly targetUserId?: string;          // Utilisateur cible de l'action
  readonly targetRole?: UserRole;          // R√¥le de la cible
  readonly relationship?: RelationshipType; // Relation avec la cible
  readonly isOwnResource?: boolean;        // Ressource personnelle
}

/**
 * üíº Types de Relations Professionnelles
 */
export enum RelationshipType {
  // Relations hi√©rarchiques
  DIRECT_REPORT = 'DIRECT_REPORT',         // Subordonn√© direct
  MANAGER = 'MANAGER',                     // Sup√©rieur hi√©rarchique
  PEER = 'PEER',                          // Coll√®gue de m√™me niveau
  
  // Relations fonctionnelles
  MENTOR = 'MENTOR',                       // Mentor
  MENTEE = 'MENTEE',                      // Mentor√©
  COLLABORATOR = 'COLLABORATOR',          // Collaborateur
  
  // Relations client-praticien
  ASSIGNED_CLIENT = 'ASSIGNED_CLIENT',     // Client assign√©
  FAMILY_MEMBER = 'FAMILY_MEMBER',        // Membre de famille
  CORPORATE_EMPLOYEE = 'CORPORATE_EMPLOYEE', // Employ√© d'entreprise cliente
  
  // Relations sp√©cialis√©es
  SUPERVISOR = 'SUPERVISOR',              // Superviseur
  TRAINEE = 'TRAINEE',                   // Stagiaire/formation
  SUBSTITUTE = 'SUBSTITUTE',             // Rempla√ßant
}

/**
 * üîí Contraintes de Permission
 */
export interface PermissionConstraint {
  readonly constraintType: ConstraintType;
  readonly value: string | number | boolean | Date;
  readonly message?: string;              // Message d'erreur personnalis√©
}

export enum ConstraintType {
  // Contraintes temporelles
  MAX_ADVANCE_BOOKING = 'MAX_ADVANCE_BOOKING',     // Jours max √† l'avance
  MIN_NOTICE_REQUIRED = 'MIN_NOTICE_REQUIRED',     // Pr√©avis minimum (minutes)
  WORKING_HOURS_ONLY = 'WORKING_HOURS_ONLY',       // Horaires ouvrables seulement
  
  // Contraintes quantitatives
  MAX_DAILY_BOOKINGS = 'MAX_DAILY_BOOKINGS',       // R√©servations max/jour
  MAX_CONCURRENT_ACTIONS = 'MAX_CONCURRENT_ACTIONS', // Actions simultan√©es max
  APPROVAL_REQUIRED = 'APPROVAL_REQUIRED',         // Approbation n√©cessaire
  
  // Contraintes contextuelles
  SAME_LOCATION_ONLY = 'SAME_LOCATION_ONLY',       // M√™me site seulement
  ASSIGNED_CLIENTS_ONLY = 'ASSIGNED_CLIENTS_ONLY', // Clients assign√©s seulement
  BUSINESS_HOURS_ONLY = 'BUSINESS_HOURS_ONLY',     // Heures d'ouverture seulement
}

/**
 * üéØ Contexte Complet de Permission
 */
export interface PermissionContext {
  readonly userRole: UserRole;
  readonly userId: string;
  readonly permission: Permission;
  readonly organizational: OrganizationalContext;
  readonly temporal?: TemporalContext;
  readonly relationship?: RelationshipContext;
  readonly constraints?: PermissionConstraint[];
  readonly metadata?: Record<string, unknown>;
}

/**
 * üìã R√©sultat d'√âvaluation de Permission
 */
export interface PermissionEvaluation {
  readonly isAllowed: boolean;
  readonly reason?: string;
  readonly constraints?: PermissionConstraint[];
  readonly suggestions?: string[];
  readonly requiresApproval?: boolean;
  readonly approvalWorkflow?: ApprovalWorkflowStep[];
}

/**
 * üîÑ Workflow d'Approbation
 */
export interface ApprovalWorkflowStep {
  readonly stepOrder: number;
  readonly approverRole: UserRole;
  readonly approverUserId?: string;
  readonly isOptional: boolean;
  readonly estimatedTime?: number; // minutes
  readonly autoApprovalConditions?: {
    timeWindow?: TemporalContext;
    valueThreshold?: number;
    urgencyLevel?: UrgencyLevel;
  };
}

export enum UrgencyLevel {
  LOW = 'LOW',
  NORMAL = 'NORMAL',
  HIGH = 'HIGH',
  CRITICAL = 'CRITICAL',
  EMERGENCY = 'EMERGENCY',
}

/**
 * üéØ Configuration de Permission par R√¥le et Contexte
 */
export interface RolePermissionConfig {
  readonly role: UserRole;
  readonly businessType: BusinessType;
  readonly permissions: PermissionRule[];
}

export interface PermissionRule {
  readonly permission: Permission;
  readonly isAllowed: boolean;
  readonly constraints?: PermissionConstraint[];
  readonly contextualRules?: ContextualRule[];
  readonly approvalRequired?: boolean;
  readonly approvalWorkflow?: ApprovalWorkflowStep[];
}

export interface ContextualRule {
  readonly condition: ContextualCondition;
  readonly action: ContextualAction;
  readonly priority: number;
}

export interface ContextualCondition {
  readonly type: 'TEMPORAL' | 'RELATIONAL' | 'ORGANIZATIONAL' | 'QUANTITATIVE';
  readonly field: string;
  readonly operator: 'EQUALS' | 'NOT_EQUALS' | 'GREATER_THAN' | 'LESS_THAN' | 'IN' | 'NOT_IN' | 'BETWEEN';
  readonly value: unknown;
}

export interface ContextualAction {
  readonly type: 'ALLOW' | 'DENY' | 'REQUIRE_APPROVAL' | 'ADD_CONSTRAINT' | 'MODIFY_PERMISSION';
  readonly parameters?: Record<string, unknown>;
  readonly message?: string;
}

/**
 * üèóÔ∏è Interface du Service d'√âvaluation de Permissions
 */
export interface PermissionEvaluator {
  /**
   * √âvalue si une permission est accord√©e dans un contexte donn√©
   */
  evaluatePermission(context: PermissionContext): Promise<PermissionEvaluation>;
  
  /**
   * Obtient toutes les permissions effectives pour un utilisateur
   */
  getEffectivePermissions(
    userRole: UserRole,
    userId: string,
    organizationalContext: OrganizationalContext
  ): Promise<Permission[]>;
  
  /**
   * V√©rifie les contraintes d'une permission
   */
  validateConstraints(
    permission: Permission,
    constraints: PermissionConstraint[],
    context: PermissionContext
  ): Promise<boolean>;
  
  /**
   * Obtient le workflow d'approbation pour une action
   */
  getApprovalWorkflow(
    permission: Permission,
    context: PermissionContext
  ): Promise<ApprovalWorkflowStep[]>;
}

/**
 * üéØ D√©corateurs de Permission (pour annotations sur m√©thodes)
 */
export interface RequirePermissionOptions {
  readonly permission: Permission;
  readonly allowSelf?: boolean;        // Autorise sur soi-m√™me
  readonly sameLocation?: boolean;     // M√™me lieu requis
  readonly businessHoursOnly?: boolean; // Heures ouvrables seulement
  readonly emergencyOverride?: boolean; // Bypass en urgence
  readonly approvalRequired?: boolean;  // Approbation n√©cessaire
}

/**
 * üìä M√©triques et Audit de Permissions
 */
export interface PermissionAuditLog {
  readonly timestamp: Date;
  readonly userId: string;
  readonly userRole: UserRole;
  readonly permission: Permission;
  readonly context: PermissionContext;
  readonly result: PermissionEvaluation;
  readonly sessionId?: string;
  readonly ipAddress?: string;
  readonly userAgent?: string;
}

/**
 * üéØ Types Utilitaires pour Gestion Avanc√©e
 */
export type PermissionMatrix = Record<UserRole, Record<Permission, PermissionRule>>;

export type BusinessTypeMatrix = Record<BusinessType, Partial<PermissionMatrix>>;

export type ContextualPermissionMap = Map<string, PermissionEvaluation>; // Cache contextuel

/**
 * üîÑ √âtat des Permissions Dynamiques
 */
export interface DynamicPermissionState {
  readonly userId: string;
  readonly role: UserRole;
  readonly temporaryPermissions?: {
    permission: Permission;
    expiresAt: Date;
    grantedBy: string;
    reason: string;
  }[];
  readonly suspendedPermissions?: {
    permission: Permission;
    suspendedAt: Date;
    suspendedBy: string;
    reason: string;
    resumesAt?: Date;
  }[];
  readonly delegatedPermissions?: {
    permission: Permission;
    delegatedTo: string;
    expiresAt: Date;
    constraints?: PermissionConstraint[];
  }[];
}
