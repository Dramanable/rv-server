/**
 * ðŸŽ¯ Ã‰numÃ©ration des Ã©tendues d'assignation pour RBAC
 * DÃ©finit le niveau hiÃ©rarchique oÃ¹ s'applique un rÃ´le
 */
export enum AssignmentScope {
  /**
   * Niveau Business : RÃ´le s'applique Ã  tout le business
   */
  BUSINESS = 'BUSINESS',

  /**
   * Niveau Location : RÃ´le s'applique uniquement Ã  une location spÃ©cifique
   */
  LOCATION = 'LOCATION',

  /**
   * Niveau Department : RÃ´le s'applique uniquement Ã  un dÃ©partement spÃ©cifique
   */
  DEPARTMENT = 'DEPARTMENT',
}

/**
 * ðŸŽ¯ Type union pour les Ã©tendues d'assignation
 */
export type AssignmentScopeType = keyof typeof AssignmentScope;

/**
 * ðŸŽ¯ HiÃ©rarchie des Ã©tendues (du plus large au plus restreint)
 */
export const ASSIGNMENT_SCOPE_HIERARCHY = [
  AssignmentScope.BUSINESS,
  AssignmentScope.LOCATION,
  AssignmentScope.DEPARTMENT,
] as const;

/**
 * ðŸŽ¯ VÃ©rifier si une Ã©tendue est plus large qu'une autre
 */
export function isScopeBroader(
  scope1: AssignmentScope,
  scope2: AssignmentScope,
): boolean {
  const hierarchy = ASSIGNMENT_SCOPE_HIERARCHY;
  return hierarchy.indexOf(scope1) < hierarchy.indexOf(scope2);
}

/**
 * ðŸŽ¯ Obtenir la description d'une Ã©tendue
 */
export function getAssignmentScopeDescription(scope: AssignmentScope): string {
  const descriptions = {
    [AssignmentScope.BUSINESS]: 'AccÃ¨s complet au business',
    [AssignmentScope.LOCATION]: 'AccÃ¨s limitÃ© Ã  la location',
    [AssignmentScope.DEPARTMENT]: 'AccÃ¨s limitÃ© au dÃ©partement',
  };

  return descriptions[scope];
}
