/**
 * üõ°Ô∏è ROLES GUARD - Protection bas√©e sur les r√¥les utilisateur
 *
 * Guard NestJS pour v√©rifier que l'utilisateur authentifi√©
 * a les r√¥les requis pour acc√©der √† une route prot√©g√©e.
 *
 * Utilise le syst√®me de r√¥les d√©fini dans UserRole enum
 * et fonctionne avec le d√©corateur @Roles()
 */

import { CanActivate, ExecutionContext, Injectable } from "@nestjs/common";
import { Reflector } from "@nestjs/core";
import { User } from "../../../domain/entities/user.entity";
import { UserRole } from "../../../shared/enums/user-role.enum";
import { ROLES_KEY } from "../decorators/roles.decorator";

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    // R√©cup√©rer les r√¥les requis depuis les m√©tadonn√©es
    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(
      ROLES_KEY,
      [context.getHandler(), context.getClass()],
    );

    // Si aucun r√¥le n'est requis, autoriser l'acc√®s
    if (!requiredRoles || requiredRoles.length === 0) {
      return true;
    }

    // R√©cup√©rer l'utilisateur depuis la requ√™te (mis par JwtAuthGuard)
    const request = context.switchToHttp().getRequest();
    const user: User = request.user;

    // Si pas d'utilisateur, refuser l'acc√®s
    if (!user) {
      return false;
    }

    // V√©rifier si l'utilisateur a au moins un des r√¥les requis
    return requiredRoles.some((role) => user.role === role);
  }
}
