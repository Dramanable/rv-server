/**
 * ğŸ‘¤ GET USER DECORATOR - Presentation Layer Security Decorator
 *
 * DÃ©corateur pour extraire les informations utilisateur de la requÃªte
 * Couche prÃ©sentation/sÃ©curitÃ© - extraction de l'utilisateur authentifiÃ©
 */

import { createParamDecorator, ExecutionContext } from "@nestjs/common";
import type { Request } from "express";
import { User } from "../../../domain/entities/user.entity";

/**
 * ğŸ‘¤ DÃ©corateur @GetUser()
 *
 * Extrait l'utilisateur authentifiÃ© de la requÃªte (req.user)
 * L'utilisateur est injectÃ© par le JwtAuthGuard aprÃ¨s validation du token
 *
 * @example
 * ```typescript
 * @Controller('users')
 * export class UserController {
 *   @Get('profile')
 *   @UseGuards(JwtAuthGuard)
 *   async getProfile(@GetUser() user: User) {
 *     // L'utilisateur authentifiÃ© est automatiquement injectÃ©
 *     return { id: user.id, email: user.email };
 *   }
 * }
 * ```
 */
export const GetUser = createParamDecorator(
  (data: string | undefined, ctx: ExecutionContext): User => {
    const request = ctx.switchToHttp().getRequest<Request>();

    // L'utilisateur est attachÃ© Ã  la requÃªte par le JwtAuthGuard
    const user = (request as any).user;

    if (!user) {
      throw new Error(
        "User not found in request. Make sure JwtAuthGuard is applied.",
      );
    }

    // Si un champ spÃ©cifique est demandÃ©, le retourner
    if (data) {
      return user[data];
    }

    // Retourner l'utilisateur complet
    return user;
  },
);
