import {
  Controller,
  Post,
  Get,
  Put,
  Delete,
  Body,
  Param,
  HttpStatus,
  HttpCode,
  UseGuards,
  Inject,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
} from '@nestjs/swagger';

import { CreateCalendarTypeUseCase } from '@application/use-cases/calendar-types/create-calendar-type.use-case';
import { GetCalendarTypeByIdUseCase } from '@application/use-cases/calendar-types/get-calendar-type-by-id.use-case';
import { ListCalendarTypesUseCase } from '@application/use-cases/calendar-types/list-calendar-types.use-case';
import { UpdateCalendarTypeUseCase } from '@application/use-cases/calendar-types/update-calendar-type.use-case';
import { DeleteCalendarTypeUseCase } from '@application/use-cases/calendar-types/delete-calendar-type.use-case';
import { TOKENS } from '@shared/constants/injection-tokens';
import { JwtAuthGuard } from '@presentation/security/auth.guard';
import { GetUser } from '@presentation/security/decorators/get-user.decorator';
import { User } from '@domain/entities/user.entity';

import {
  CreateCalendarTypeDto,
  UpdateCalendarTypeDto,
  ListCalendarTypesDto,
  DeleteCalendarTypeDto,
  CalendarTypeResponseDto,
  CreateCalendarTypeResponseDto,
  ListCalendarTypesResponseDto,
  UpdateCalendarTypeResponseDto,
  DeleteCalendarTypeResponseDto,
} from '@presentation/dtos/calendar-types';

/**
 * üìÖ Controller pour la gestion des types de calendrier
 * ‚úÖ CRUD complet avec validation
 * ‚úÖ Swagger documentation
 * ‚úÖ Authentification JWT obligatoire
 * ‚úÖ Audit et logging int√©gr√©s
 */
@ApiTags('üìÖ Calendar Types')
@Controller('calendar-types')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
export class CalendarTypesController {
  constructor(
    @Inject(TOKENS.CREATE_CALENDAR_TYPE_USE_CASE)
    private readonly createCalendarTypeUseCase: CreateCalendarTypeUseCase,

    @Inject(TOKENS.GET_CALENDAR_TYPE_BY_ID_USE_CASE)
    private readonly getCalendarTypeByIdUseCase: GetCalendarTypeByIdUseCase,

    @Inject(TOKENS.LIST_CALENDAR_TYPES_USE_CASE)
    private readonly listCalendarTypesUseCase: ListCalendarTypesUseCase,

    @Inject(TOKENS.UPDATE_CALENDAR_TYPE_USE_CASE)
    private readonly updateCalendarTypeUseCase: UpdateCalendarTypeUseCase,

    @Inject(TOKENS.DELETE_CALENDAR_TYPE_USE_CASE)
    private readonly deleteCalendarTypeUseCase: DeleteCalendarTypeUseCase,
  ) {}

  /**
   * üîç Recherche avanc√©e pagin√©e des types de calendrier
   */
  @Post('list')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'üîç Search Calendar Types with Advanced Filters',
    description: `
    **Recherche avanc√©e pagin√©e** des types de calendrier avec syst√®me de filtrage complet.

    ## üéØ Fonctionnalit√©s

    ### üìä **Filtres disponibles**
    - **Recherche textuelle** : Nom, description
    - **Filtres m√©tier** : Statut actif/inactif
    - **Tri multi-crit√®res** : Nom, date cr√©ation, ordre d'affichage
    - **Pagination** : Page/limit avec m√©tadonn√©es compl√®tes

    ### üìã **R√®gles m√©tier**
    - ‚úÖ **Permissions** : Scoped selon r√¥le utilisateur
    - ‚úÖ **Validation** : Tous param√®tres valid√©s c√¥t√© serveur
    - ‚úÖ **Performance** : Pagination obligatoire, cache optimis√©

    ### üîê **S√©curit√©**
    - **JWT** : Token Bearer obligatoire
    - **RBAC** : Permissions granulaires par ressource

    ## üéØ **Guide d'int√©gration Frontend**

    ### React/Vue.js Example
    \`\`\`typescript
    const searchCalendarTypes = async (filters: CalendarTypeFilters) => {
      const response = await api.post('/api/v1/calendar-types/list', {
        ...filters,
        page: 1,
        limit: 20
      });

      return {
        calendarTypes: response.data.data,
        pagination: response.data.meta
      };
    };
    \`\`\`
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '‚úÖ Calendar types found successfully',
    type: ListCalendarTypesResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: '‚ùå Invalid search parameters',
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: 'üîê Authentication required',
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: 'üö´ Insufficient permissions',
  })
  async list(
    @Body() dto: ListCalendarTypesDto,
    @GetUser() user: User,
  ): Promise<ListCalendarTypesResponseDto> {
    const result = await this.listCalendarTypesUseCase.execute({
      businessId: dto.businessId,
      page: dto.page ?? 1,
      limit: dto.limit ?? 10,
      sortBy: dto.sortBy ?? 'createdAt',
      sortOrder: dto.sortOrder ?? 'desc',
      search: dto.search,
      isActive: dto.isActive,
      requestingUserId: user.id,
      correlationId: this.generateCorrelationId(),
    });

    return {
      success: true,
      data: result.data.map((calendarType: any) => ({
        id: calendarType.getId().getValue(),
        businessId: calendarType.getBusinessId().getValue(),
        name: calendarType.getName(),
        code: calendarType.getCode(),
        description: calendarType.getDescription(),
        color: calendarType.getColor(),
        icon: calendarType.getIcon(),
        sortOrder: calendarType.getSortOrder(),
        isActive: calendarType.isActive(),
        isBuiltIn: calendarType.isBuiltIn(),
        createdBy: calendarType.getCreatedBy(),
        updatedBy: calendarType.getUpdatedBy(),
        createdAt: calendarType.getCreatedAt(),
        updatedAt: calendarType.getUpdatedAt(),
      })),
      meta: {
        currentPage: result.meta.currentPage,
        totalPages: result.meta.totalPages,
        totalItems: result.meta.totalItems,
        itemsPerPage: result.meta.itemsPerPage,
        hasNextPage: result.meta.hasNextPage,
        hasPrevPage: result.meta.hasPrevPage,
      },
    };
  }

  /**
   * üìÑ R√©cup√©rer un type de calendrier par son ID
   */
  @Get(':id')
  @ApiParam({
    name: 'id',
    description: 'UUID unique du type de calendrier',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiOperation({
    summary: 'üìÑ Get Calendar Type by ID',
    description: `
    R√©cup√®re un type de calendrier sp√©cifique par son identifiant UUID.

    ## üéØ Fonctionnalit√©s
    - **Validation UUID** : Format d'ID v√©rifi√© automatiquement
    - **Permissions** : Acc√®s contr√¥l√© selon le r√¥le utilisateur
    - **Cache** : R√©ponse mise en cache pour optimiser les performances
    - **Audit** : Toutes les consultations sont trac√©es

    ## üìä **Donn√©es retourn√©es**
    - Informations compl√®tes du type de calendrier
    - M√©tadonn√©es (dates cr√©ation/modification, auteur)
    - Statut et param√®tres de configuration
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '‚úÖ Calendar type found successfully',
    type: CalendarTypeResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: '‚ùå Calendar type not found',
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: 'üîê Authentication required',
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: 'üö´ Insufficient permissions',
  })
  async findById(
    @Param('id') id: string,
    @GetUser() user: User,
  ): Promise<CalendarTypeResponseDto> {
    const result = await this.getCalendarTypeByIdUseCase.execute({
      calendarTypeId: id,
      requestingUserId: user.id,
      correlationId: this.generateCorrelationId(),
    });

    return {
      success: true,
      data: {
        id: result.calendarType.getId().getValue(),
        businessId: result.calendarType.getBusinessId().getValue(),
        name: result.calendarType.getName(),
        code: result.calendarType.getCode(),
        description: result.calendarType.getDescription(),
        color: result.calendarType.getColor(),
        icon: result.calendarType.getIcon(),
        sortOrder: result.calendarType.getSortOrder(),
        isActive: result.calendarType.isActive(),
        isBuiltIn: result.calendarType.isBuiltIn(),
        createdBy: result.calendarType.getCreatedBy(),
        updatedBy: result.calendarType.getUpdatedBy(),
        createdAt: result.calendarType.getCreatedAt(),
        updatedAt: result.calendarType.getUpdatedAt(),
      },
    };
  }

  /**
   * ‚ûï Cr√©er un nouveau type de calendrier
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '‚ûï Create New Calendar Type',
    description: `
    Cr√©e un nouveau type de calendrier avec validation compl√®te des donn√©es m√©tier.

    ## üéØ Fonctionnalit√©s
    - **Validation stricte** : Toutes les donn√©es sont valid√©es
    - **Unicit√©** : V√©rification automatique des doublons
    - **Audit complet** : Tra√ßabilit√© de la cr√©ation
    - **Configuration m√©tier** : Param√®tres personnalisables

    ## üìã **R√®gles de validation**
    - **Nom** : 2-100 caract√®res, unique par business
    - **Description** : Optionnelle, max 500 caract√®res
    - **Couleur** : Format hexad√©cimal (#RRGGBB)
    - **Ic√¥ne** : Nom d'ic√¥ne valide (optionnel)
    - **Ordre d'affichage** : Nombre entier positif

    ## üéØ **Guide d'int√©gration Frontend**

    ### React/Vue.js Example
    \`\`\`typescript
    const createCalendarType = async (data: CalendarTypeData) => {
      const response = await api.post('/api/v1/calendar-types', {
        name: data.name,
        description: data.description,
        color: data.color,
        icon: data.icon,
        sortOrder: data.sortOrder,
        isActive: true
      });

      return response.data.data;
    };
    \`\`\`
    `,
  })
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: '‚úÖ Calendar type created successfully',
    type: CreateCalendarTypeResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: '‚ùå Invalid calendar type data',
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: '‚ùå Calendar type name already exists',
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: 'üîê Authentication required',
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: 'üö´ Insufficient permissions',
  })
  async create(
    @Body() dto: CreateCalendarTypeDto,
    @GetUser() user: User,
  ): Promise<CreateCalendarTypeResponseDto> {
    const result = await this.createCalendarTypeUseCase.execute({
      businessId: dto.businessId,
      name: dto.name,
      code: dto.code,
      description: dto.description,
      color: dto.color,
      icon: dto.icon,
      sortOrder: dto.sortOrder ?? 0,
      isActive: dto.isActive ?? true,
      requestingUserId: user.id,
      correlationId: this.generateCorrelationId(),
      timestamp: new Date(),
    });

    return {
      success: true,
      data: {
        id: result.calendarType.getId().getValue(),
        businessId: result.calendarType.getBusinessId().getValue(),
        name: result.calendarType.getName(),
        code: result.calendarType.getCode(),
        description: result.calendarType.getDescription(),
        color: result.calendarType.getColor(),
        icon: result.calendarType.getIcon(),
        sortOrder: result.calendarType.getSortOrder(),
        isActive: result.calendarType.isActive(),
        isBuiltIn: result.calendarType.isBuiltIn(),
        createdBy: result.calendarType.getCreatedBy(),
        updatedBy: result.calendarType.getUpdatedBy(),
        createdAt: result.calendarType.getCreatedAt(),
        updatedAt: result.calendarType.getUpdatedAt(),
      },
      meta: {
        timestamp: new Date().toISOString(),
        correlationId: this.generateCorrelationId(),
      },
    };
  }

  /**
   * ‚úèÔ∏è Mettre √† jour un type de calendrier existant
   */
  @Put(':id')
  @ApiParam({
    name: 'id',
    description: 'UUID unique du type de calendrier √† modifier',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiOperation({
    summary: '‚úèÔ∏è Update Existing Calendar Type',
    description: `
    Met √† jour un type de calendrier existant avec validation compl√®te.

    ## üéØ Fonctionnalit√©s
    - **Mise √† jour partielle** : Seulement les champs fournis sont modifi√©s
    - **Validation** : Toutes les nouvelles donn√©es sont valid√©es
    - **Audit complet** : Tra√ßabilit√© des modifications
    - **V√©rifications m√©tier** : Contraintes d'unicit√© respect√©es

    ## üìã **Champs modifiables**
    - Nom, description, couleur, ic√¥ne
    - Ordre d'affichage, statut actif/inactif
    - Toutes modifications sont audit√©es et horodat√©es
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '‚úÖ Calendar type updated successfully',
    type: UpdateCalendarTypeResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: '‚ùå Calendar type not found',
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: '‚ùå Invalid update data',
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: '‚ùå Calendar type name already exists',
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: 'üîê Authentication required',
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: 'üö´ Insufficient permissions',
  })
  async update(
    @Param('id') id: string,
    @Body() dto: UpdateCalendarTypeDto,
    @GetUser() user: User,
  ): Promise<UpdateCalendarTypeResponseDto> {
    const result = await this.updateCalendarTypeUseCase.execute({
      calendarTypeId: id,
      businessId: dto.businessId,
      name: dto.name,
      code: dto.code,
      description: dto.description,
      color: dto.color,
      icon: dto.icon,
      sortOrder: dto.sortOrder,
      isActive: dto.isActive,
      requestingUserId: user.id,
      correlationId: this.generateCorrelationId(),
    });

    return {
      success: true,
      data: {
        id: result.calendarType.getId().getValue(),
        businessId: result.calendarType.getBusinessId().getValue(),
        name: result.calendarType.getName(),
        code: result.calendarType.getCode(),
        description: result.calendarType.getDescription(),
        color: result.calendarType.getColor(),
        icon: result.calendarType.getIcon(),
        sortOrder: result.calendarType.getSortOrder(),
        isActive: result.calendarType.isActive(),
        isBuiltIn: result.calendarType.isBuiltIn(),
        createdBy: result.calendarType.getCreatedBy(),
        updatedBy: result.calendarType.getUpdatedBy(),
        createdAt: result.calendarType.getCreatedAt(),
        updatedAt: result.calendarType.getUpdatedAt(),
      },
      meta: {
        timestamp: new Date().toISOString(),
        correlationId: this.generateCorrelationId(),
      },
    };
  }

  /**
   * üóëÔ∏è Supprimer un type de calendrier
   */
  @Delete(':id')
  @ApiParam({
    name: 'id',
    description: 'UUID unique du type de calendrier √† supprimer',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiOperation({
    summary: 'üóëÔ∏è Delete Calendar Type',
    description: `
    Supprime un type de calendrier avec v√©rifications de s√©curit√© compl√®tes.

    ## ‚ö†Ô∏è **R√®gles de suppression**
    - **V√©rification d'usage** : Impossible de supprimer si utilis√© par des calendriers existants
    - **Soft delete** : Marquage comme inactif plut√¥t que suppression physique
    - **Audit complet** : Tra√ßabilit√© de la suppression
    - **Permissions** : Seuls les administrateurs peuvent supprimer

    ## üîí **S√©curit√©**
    - V√©rification des d√©pendances avant suppression
    - Confirmation utilisateur requise c√¥t√© frontend
    - Logs d√©taill√©s pour audit de s√©curit√©
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: '‚úÖ Calendar type deleted successfully',
    type: DeleteCalendarTypeResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: '‚ùå Calendar type not found',
  })
  @ApiResponse({
    status: HttpStatus.UNPROCESSABLE_ENTITY,
    description: '‚ùå Cannot delete: calendar type is in use',
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: 'üîê Authentication required',
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: 'üö´ Insufficient permissions',
  })
  async delete(
    @Param('id') id: string,
    @Body() dto: DeleteCalendarTypeDto,
    @GetUser() user: User,
  ): Promise<DeleteCalendarTypeResponseDto> {
    const result = await this.deleteCalendarTypeUseCase.execute({
      calendarTypeId: id,
      businessId: dto.businessId,
      requestingUserId: user.id,
      correlationId: dto.correlationId || this.generateCorrelationId(),
    });

    return {
      success: true,
      message: result.message,
      meta: {
        timestamp: new Date().toISOString(),
        correlationId: dto.correlationId || this.generateCorrelationId(),
      },
    };
  }

  /**
   * G√©n√®re un ID de corr√©lation unique pour le tracing
   */
  private generateCorrelationId(): string {
    return `calendar-type-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
}
