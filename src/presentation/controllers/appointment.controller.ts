/**
 * üìÖ APPOINTMENT CONTROLLER - CLEAN ARCHITECTURE
 * ‚úÖ REST API pour la gestion des rendez-vous avec Clean Architecture
 * ‚úÖ Pattern standardis√© avec recherche pagin√©e
 * ‚úÖ Mapping Domain ‚Üî DTO avec AppointmentMapper
 */

import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Inject,
  Param,
  Post,
  Put,
} from "@nestjs/common";
import {
  ApiBearerAuth,
  ApiOperation,
  ApiParam,
  ApiResponse,
  ApiTags,
} from "@nestjs/swagger";

import { User } from "@domain/entities/user.entity";
import { TOKENS } from "@shared/constants/injection-tokens";
import { GetUser } from "../security/decorators/get-user.decorator";

// Use Cases
import { BookAppointmentUseCase } from "@application/use-cases/appointments/book-appointment.use-case";
import { CancelAppointmentUseCase } from "@application/use-cases/appointments/cancel-appointment.use-case";
import { GetAppointmentByIdUseCase } from "@application/use-cases/appointments/get-appointment-by-id.use-case";
import { GetAvailableSlotsUseCase } from "@application/use-cases/appointments/get-available-slots-simple.use-case";
import { ListAppointmentsUseCase } from "@application/use-cases/appointments/list-appointments.use-case";
import { UpdateAppointmentUseCase } from "@application/use-cases/appointments/update-appointment.use-case";

// DTOs
import {
  AppointmentResponseDto,
  AvailableSlotResponseDto,
  BookAppointmentDto,
  BookAppointmentResponseDto,
  CancelAppointmentDto,
  CancelAppointmentResponseDto,
  GetAvailableSlotsDto,
  ListAppointmentsDto,
  ListAppointmentsResponseDto,
  UpdateAppointmentDto,
} from "../dtos/appointments";

// Mapper
import { AppointmentMapper } from "../mappers/appointment.mapper";

@ApiTags("üìÖ Appointments")
@Controller("appointments")
@ApiBearerAuth()
export class AppointmentController {
  constructor(
    @Inject(TOKENS.GET_AVAILABLE_SLOTS_USE_CASE)
    private readonly getAvailableSlotsUseCase: GetAvailableSlotsUseCase,
    @Inject(TOKENS.BOOK_APPOINTMENT_USE_CASE)
    private readonly bookAppointmentUseCase: BookAppointmentUseCase,
    @Inject(TOKENS.LIST_APPOINTMENTS_USE_CASE)
    private readonly listAppointmentsUseCase: ListAppointmentsUseCase,
    @Inject(TOKENS.GET_APPOINTMENT_BY_ID_USE_CASE)
    private readonly getAppointmentByIdUseCase: GetAppointmentByIdUseCase,
    @Inject(TOKENS.UPDATE_APPOINTMENT_USE_CASE)
    private readonly updateAppointmentUseCase: UpdateAppointmentUseCase,
    @Inject(TOKENS.CANCEL_APPOINTMENT_USE_CASE)
    private readonly cancelAppointmentUseCase: CancelAppointmentUseCase,
  ) {}

  /**
   * üîç GET AVAILABLE SLOTS
   * R√©cup√®re les cr√©neaux disponibles pour un service
   */
  @Post("available-slots")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "üîç Get Available Time Slots",
    description: `
    R√©cup√®re les cr√©neaux disponibles pour un service donn√©.

    ‚úÖ Fonctionnalit√©s :
    - Recherche par service et business
    - Filtrage par calendrier sp√©cifique
    - Cr√©neaux disponibles en temps r√©el
    - Gestion des indisponibilit√©s du staff

    üîê Permissions requises :
    - BOOK_APPOINTMENTS ou READ_APPOINTMENTS
    - Scoping automatique selon contexte business
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Available slots found successfully",
    type: [AvailableSlotResponseDto],
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå Invalid request parameters",
  })
  async getAvailableSlots(
    @Body() dto: GetAvailableSlotsDto,
    @GetUser() user: User,
  ): Promise<AvailableSlotResponseDto[]> {
    const request = AppointmentMapper.toGetAvailableSlotsRequest(dto, user.id);
    const response = await this.getAvailableSlotsUseCase.execute(request);
    return response.availableSlots.map((slot) =>
      AppointmentMapper.toAvailableSlotResponseDto(slot),
    );
  }

  /**
   * üìÖ BOOK APPOINTMENT
   * R√©servation d'un nouveau rendez-vous
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: "üìÖ Book New Appointment",
    description: `
    R√©serve un nouveau rendez-vous avec validation compl√®te.

    ‚úÖ Fonctionnalit√©s :
    - Validation de disponibilit√© en temps r√©el
    - Support des r√©servations familiales (bookedBy)
    - V√©rification des permissions de r√©servation
    - Notifications automatiques

    üìã R√®gles m√©tier :
    - Service doit autoriser la r√©servation en ligne
    - Cr√©neaux valid√©s c√¥t√© serveur
    - Informations client obligatoires

    üîê Permissions requises :
    - BOOK_APPOINTMENTS
    - Scoping par business context
    `,
  })
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: "‚úÖ Appointment booked successfully",
    type: BookAppointmentResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå Invalid booking data or business rules violation",
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: "‚ùå Time slot no longer available",
  })
  async bookAppointment(
    @Body() dto: BookAppointmentDto,
    @GetUser() user: User,
  ): Promise<BookAppointmentResponseDto> {
    const request = AppointmentMapper.toBookAppointmentRequest(dto, user.id);
    const response = await this.bookAppointmentUseCase.execute(request);
    return AppointmentMapper.toBookAppointmentResponseDto(response);
  }

  /**
   * üìã LIST APPOINTMENTS
   * Recherche avanc√©e pagin√©e des rendez-vous
   */
  @Post("list")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "üìã List Appointments with Advanced Search",
    description: `
    Recherche avanc√©e pagin√©e des rendez-vous.

    ‚úÖ Fonctionnalit√©s :
    - Pagination (page, limit)
    - Tri multi-crit√®res
    - Filtres par statut, date, service
    - Recherche textuelle sur client
    - Scoping automatique selon r√¥le

    üîê Permissions requises :
    - VIEW_APPOINTMENTS (pour ses propres RDV)
    - MANAGE_APPOINTMENTS (pour tous les RDV du business)
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Appointments found successfully",
    type: ListAppointmentsResponseDto,
  })
  async listAppointments(
    @Body() dto: ListAppointmentsDto,
    @GetUser() user: User,
  ): Promise<ListAppointmentsResponseDto> {
    const request = AppointmentMapper.toListAppointmentsRequest(dto, user.id);
    const response = await this.listAppointmentsUseCase.execute(request);
    return AppointmentMapper.toListAppointmentsResponseDto(response);
  }

  /**
   * üîç GET APPOINTMENT BY ID
   * R√©cup√®re un rendez-vous par son ID
   */
  @Get(":id")
  @ApiOperation({
    summary: "üîç Get Appointment by ID",
    description:
      "R√©cup√®re les d√©tails complets d'un rendez-vous par son identifiant.",
  })
  @ApiParam({
    name: "id",
    description: "UUID de l'appointment",
    format: "uuid",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Appointment found successfully",
    type: AppointmentResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "‚ùå Appointment not found",
  })
  async getAppointmentById(
    @Param("id") id: string,
    @GetUser() user: User,
  ): Promise<AppointmentResponseDto> {
    const response = await this.getAppointmentByIdUseCase.execute({
      appointmentId: id,
      requestingUserId: user.id,
    });
    return AppointmentMapper.toAppointmentResponseDto(response.appointment);
  }

  /**
   * ‚úèÔ∏è UPDATE APPOINTMENT
   * Mise √† jour d'un rendez-vous existant
   */
  @Put(":id")
  @ApiOperation({
    summary: "‚úèÔ∏è Update Appointment",
    description: `
    Met √† jour un rendez-vous existant avec validation des r√®gles m√©tier.

    ‚úÖ Modifications autoris√©es :
    - Changement de cr√©neaux horaires
    - Modification des informations client
    - Ajout/modification de notes
    - R√©assignation de staff

    üîê Permissions requises :
    - MANAGE_APPOINTMENTS ou propri√©taire du RDV
    `,
  })
  @ApiParam({
    name: "id",
    description: "UUID de l'appointment √† modifier",
    format: "uuid",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Appointment updated successfully",
    type: AppointmentResponseDto,
  })
  async updateAppointment(
    @Param("id") id: string,
    @Body() dto: UpdateAppointmentDto,
    @GetUser() user: User,
  ): Promise<AppointmentResponseDto> {
    const request = AppointmentMapper.toUpdateAppointmentRequest(
      dto,
      id,
      user.id,
    );
    const response = await this.updateAppointmentUseCase.execute(request);
    return AppointmentMapper.toAppointmentResponseDto(response.appointment);
  }

  /**
   * ‚ùå CANCEL APPOINTMENT
   * Annulation d'un rendez-vous
   */
  @Delete(":id")
  @ApiOperation({
    summary: "‚ùå Cancel Appointment",
    description: `
    Annule un rendez-vous avec gestion des notifications.

    ‚úÖ Fonctionnalit√©s :
    - Annulation avec raison
    - Notifications automatiques
    - Lib√©ration du cr√©neau
    - Historique d'annulation

    üîê Permissions requises :
    - CANCEL_APPOINTMENTS ou propri√©taire du RDV
    `,
  })
  @ApiParam({
    name: "id",
    description: "UUID de l'appointment √† annuler",
    format: "uuid",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Appointment cancelled successfully",
    type: CancelAppointmentResponseDto,
  })
  async cancelAppointment(
    @Param("id") id: string,
    @Body() dto: CancelAppointmentDto,
    @GetUser() user: User,
  ): Promise<CancelAppointmentResponseDto> {
    const request = AppointmentMapper.toCancelAppointmentRequest(
      dto,
      id,
      user.id,
    );
    const response = await this.cancelAppointmentUseCase.execute(request);
    return AppointmentMapper.toCancelAppointmentResponseDto(
      response,
      response.appointment,
    );
  }
}
