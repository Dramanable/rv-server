/**
 * üè• PRESENTATION CONTROLLER - ProfessionalRole
 * Clean Architecture - Presentation Layer
 * Contr√¥leur REST pour la gestion des r√¥les professionnels
 */

import {
  Body,
  Controller,
  Delete,
  Get,
  HttpStatus,
  Inject,
  Param,
  Post,
  Put,
  UseGuards,
} from "@nestjs/common";
import {
  ApiBearerAuth,
  ApiOperation,
  ApiParam,
  ApiResponse,
  ApiTags,
} from "@nestjs/swagger";

import { GetUser } from "@presentation/security/decorators/get-user.decorator";
import { JwtAuthGuard } from "@presentation/security/guards/jwt-auth.guard";
import { TOKENS } from "@shared/constants/injection-tokens";

// DTOs
import {
  CreateProfessionalRoleDto,
  CreateProfessionalRoleResponseDto,
  DeleteProfessionalRoleResponseDto,
  ListProfessionalRolesDto,
  ListProfessionalRolesResponseDto,
  ProfessionalRoleDto,
  UpdateProfessionalRoleDto,
  UpdateProfessionalRoleResponseDto,
} from "@presentation/dtos/professional-roles/professional-role.dto";

// Mappers
import { ProfessionalRoleMapper } from "@presentation/mappers/professional-role.mapper";

// Use Cases
import { CreateProfessionalRoleUseCase } from "@application/use-cases/professional-roles/create-professional-role.use-case";
import { DeleteProfessionalRoleUseCase } from "@application/use-cases/professional-roles/delete-professional-role.use-case";
import { GetProfessionalRoleUseCase } from "@application/use-cases/professional-roles/get-professional-role.use-case";
import { ListProfessionalRolesUseCase } from "@application/use-cases/professional-roles/list-professional-roles.use-case";
import { UpdateProfessionalRoleUseCase } from "@application/use-cases/professional-roles/update-professional-role.use-case";

@ApiTags("üé≠ Professional Roles")
@Controller("professional-roles")
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
export class ProfessionalRoleController {
  constructor(
    @Inject(TOKENS.CREATE_PROFESSIONAL_ROLE_USE_CASE)
    private readonly createProfessionalRoleUseCase: CreateProfessionalRoleUseCase,

    @Inject(TOKENS.GET_PROFESSIONAL_ROLE_USE_CASE)
    private readonly getProfessionalRoleUseCase: GetProfessionalRoleUseCase,

    @Inject(TOKENS.LIST_PROFESSIONAL_ROLES_USE_CASE)
    private readonly listProfessionalRolesUseCase: ListProfessionalRolesUseCase,

    @Inject(TOKENS.UPDATE_PROFESSIONAL_ROLE_USE_CASE)
    private readonly updateProfessionalRoleUseCase: UpdateProfessionalRoleUseCase,

    @Inject(TOKENS.DELETE_PROFESSIONAL_ROLE_USE_CASE)
    private readonly deleteProfessionalRoleUseCase: DeleteProfessionalRoleUseCase,
  ) {}

  @Post("list")
  @ApiOperation({
    summary: "üîç Search Professional Roles with Advanced Filters",
    description: `
    **Recherche avanc√©e pagin√©e** des r√¥les professionnels avec syst√®me de filtrage complet.

    ## üéØ Fonctionnalit√©s

    ### üìä **Filtres disponibles**
    - **Recherche textuelle** : Nom, nom d'affichage, description, code
    - **Filtres m√©tier** : Cat√©gorie, statut actif, capacit√© de leadership
    - **Tri multi-crit√®res** : Tous champs avec asc/desc
    - **Pagination** : Page/limit avec m√©tadonn√©es compl√®tes

    ### üè• **Cat√©gories disponibles**
    - **HEALTHCARE** : Personnel m√©dical et param√©dical
    - **WELLNESS** : Professionnels du bien-√™tre
    - **BEAUTY** : Professionnels de l'esth√©tique
    - **SPORTS** : Entra√Æneurs et coaches sportifs
    - **THERAPY** : Th√©rapeutes et conseillers
    - **TECHNICAL** : Personnel technique et support
    - **ADMINISTRATIVE** : Personnel administratif

    ### üìã **R√®gles m√©tier**
    - ‚úÖ **Permissions** : Scoped selon r√¥le utilisateur
    - ‚úÖ **Validation** : Tous param√®tres valid√©s c√¥t√© serveur
    - ‚úÖ **Performance** : Pagination obligatoire, cache Redis

    ### üîê **S√©curit√©**
    - **JWT** : Token Bearer obligatoire
    - **RBAC** : Permissions granulaires par ressource
    - **Rate limiting** : 100 req/min par utilisateur
    `,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Professional roles found successfully",
    type: ListProfessionalRolesResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå Invalid search parameters",
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: "üîê Authentication required",
  })
  @ApiResponse({
    status: HttpStatus.FORBIDDEN,
    description: "üö´ Insufficient permissions",
  })
  async list(
    @Body() dto: ListProfessionalRolesDto,
    @GetUser() user: any,
  ): Promise<ListProfessionalRolesResponseDto> {
    const request = ProfessionalRoleMapper.toListRequest(dto, user.id);
    const response = await this.listProfessionalRolesUseCase.execute(request);
    return ProfessionalRoleMapper.toListResponse(response);
  }

  @Get(":id")
  @ApiOperation({
    summary: "üìÑ Get Professional Role by ID",
    description:
      "R√©cup√®re un r√¥le professionnel sp√©cifique par son identifiant unique",
  })
  @ApiParam({
    name: "id",
    description: "Professional role unique identifier",
    example: "12345678-1234-1234-1234-123456789012",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Professional role found",
    type: ProfessionalRoleDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "‚ùå Professional role not found",
  })
  async findById(
    @Param("id") id: string,
    @GetUser() user: any,
  ): Promise<ProfessionalRoleDto> {
    const request = {
      professionalRoleId: id,
      requestingUserId: user.id,
    };
    const response = await this.getProfessionalRoleUseCase.execute(request);
    return ProfessionalRoleMapper.toGetResponse(response);
  }

  @Post()
  @ApiOperation({
    summary: "‚ûï Create New Professional Role",
    description: `
    **Cr√©e un nouveau r√¥le professionnel** avec validation compl√®te.

    ### ‚úÖ **R√®gles de validation**
    - **Code** : Unique, majuscules, chiffres et underscores uniquement
    - **Nom** : 2-100 caract√®res
    - **Nom d'affichage** : 2-100 caract√®res
    - **Cat√©gorie** : Une des cat√©gories pr√©d√©finies
    - **Description** : Optionnelle, max 500 caract√®res

    ### üéØ **Param√®tres optionnels**
    - **canLead** : D√©faut false, indique si le r√¥le peut diriger
    - **isActive** : D√©faut true, statut d'activation
    `,
  })
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: "‚úÖ Professional role created successfully",
    type: CreateProfessionalRoleResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå Validation errors",
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: "‚ùå Professional role code already exists",
  })
  async create(
    @Body() dto: CreateProfessionalRoleDto,
    @GetUser() user: any,
  ): Promise<CreateProfessionalRoleResponseDto> {
    const request = ProfessionalRoleMapper.toCreateRequest(dto, user.id);
    const domainEntity =
      await this.createProfessionalRoleUseCase.execute(request);
    return ProfessionalRoleMapper.toCreateResponse(domainEntity);
  }

  @Put(":id")
  @ApiOperation({
    summary: "‚úèÔ∏è Update Professional Role",
    description: `
    **Met √† jour un r√¥le professionnel existant** avec validation partielle.

    ### üìù **Champs modifiables**
    - **Nom d'affichage** : Peut √™tre diff√©rent du nom technique
    - **Description** : Texte libre, max 500 caract√®res
    - **Capacit√© leadership** : Boolean canLead
    - **Statut actif** : Boolean isActive

    ### üö´ **Champs non modifiables**
    - **Code** : Identifiant technique permanent
    - **Nom** : Nom technique permanent
    - **Cat√©gorie** : Type de r√¥le permanent

    ### ‚ö†Ô∏è **Restrictions**
    - Seuls les administrateurs peuvent d√©sactiver un r√¥le
    - Les r√¥les avec du personnel assign√© ne peuvent pas √™tre supprim√©s
    `,
  })
  @ApiParam({
    name: "id",
    description: "Professional role unique identifier",
    example: "12345678-1234-1234-1234-123456789012",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Professional role updated successfully",
    type: UpdateProfessionalRoleResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "‚ùå Professional role not found",
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå Validation errors",
  })
  async update(
    @Param("id") id: string,
    @Body() dto: UpdateProfessionalRoleDto,
    @GetUser() user: any,
  ): Promise<UpdateProfessionalRoleResponseDto> {
    const request = ProfessionalRoleMapper.toUpdateRequest(id, dto, user.id);
    const domainEntity =
      await this.updateProfessionalRoleUseCase.execute(request);
    return ProfessionalRoleMapper.toUpdateResponse(domainEntity);
  }

  @Delete(":id")
  @ApiOperation({
    summary: "üóëÔ∏è Delete Professional Role",
    description: `
    **Supprime un r√¥le professionnel** apr√®s v√©rification des contraintes.

    ### ‚ö†Ô∏è **Contraintes de suppression**
    - Le r√¥le ne doit pas √™tre assign√© √† du personnel actif
    - Seuls les administrateurs peuvent supprimer des r√¥les
    - Les r√¥les syst√®me ne peuvent pas √™tre supprim√©s

    ### üîÑ **Alternative recommand√©e**
    - D√©sactiver le r√¥le (isActive = false) plut√¥t que le supprimer
    - Permet de conserver l'historique et les r√©f√©rences
    `,
  })
  @ApiParam({
    name: "id",
    description: "Professional role unique identifier",
    example: "12345678-1234-1234-1234-123456789012",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "‚úÖ Professional role deleted successfully",
    type: DeleteProfessionalRoleResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "‚ùå Professional role not found",
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: "‚ùå Cannot delete: role is still in use",
  })
  async delete(
    @Param("id") id: string,
    @GetUser() user: any,
  ): Promise<DeleteProfessionalRoleResponseDto> {
    const request = {
      professionalRoleId: id,
      requestingUserId: user.id,
    };
    await this.deleteProfessionalRoleUseCase.execute(request);
    return ProfessionalRoleMapper.toDeleteResponse();
  }
}
