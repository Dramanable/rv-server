/**
 * üö´ DTOs pour la r√©vocation d'assignations de r√¥les
 * Respecte les principes de validation stricte et tra√ßabilit√©
 */

import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  IsNotEmpty,
  IsObject,
  IsOptional,
  IsString,
  IsUUID,
  Length,
} from 'class-validator';

import { AssignmentScope } from '@shared/enums/assignment-scope.enum';
import { UserRole } from '@shared/enums/user-role.enum';

/**
 * üìù DTO pour r√©voquer une assignation de r√¥le
 */
export class RevokeRoleDto {
  @ApiProperty({
    description: "ID de l'assignation de r√¥le √† r√©voquer",
    example: '456e7890-e89b-12d3-a456-426614174111',
    format: 'uuid',
  })
  @IsUUID('4', { message: "L'ID d'assignation doit √™tre un UUID valide" })
  @IsNotEmpty({ message: "L'ID d'assignation est obligatoire" })
  readonly assignmentId!: string;

  @ApiPropertyOptional({
    description: 'Raison de la r√©vocation',
    example: 'Fin de projet temporaire',
    maxLength: 500,
  })
  @IsOptional()
  @IsString({ message: 'La raison doit √™tre une cha√Æne de caract√®res' })
  @Length(1, 500, { message: 'La raison doit contenir 1 √† 500 caract√®res' })
  readonly reason?: string;

  @ApiPropertyOptional({
    description: 'Notes additionnelles sur la r√©vocation',
    example: 'R√©vocation planifi√©e suite √† la fin du projet Q4',
    maxLength: 1000,
  })
  @IsOptional()
  @IsString({ message: 'Les notes doivent √™tre une cha√Æne de caract√®res' })
  @Length(0, 1000, { message: 'Les notes ne peuvent d√©passer 1000 caract√®res' })
  readonly notes?: string;

  @ApiPropertyOptional({
    description: 'M√©tadonn√©es de r√©vocation',
    type: 'object',
    additionalProperties: true,
    example: {
      revokedBy: 'manager@example.com',
      category: 'planned_termination',
      impact: 'low',
    },
  })
  @IsOptional()
  @IsObject({ message: 'Les m√©tadonn√©es doivent √™tre un objet valide' })
  readonly metadata?: Record<string, unknown>;
}

/**
 * üìÑ DTO de r√©ponse pour la r√©vocation de r√¥le
 */
export class RevokeRoleResponseDto {
  @ApiProperty({
    description: "Succ√®s de l'op√©ration",
    example: true,
  })
  readonly success!: boolean;

  @ApiProperty({
    description: "Donn√©es de l'assignation r√©voqu√©e",
    type: 'object',
    additionalProperties: true,
  })
  readonly data!: {
    readonly assignmentId: string;
    readonly userId: string;
    readonly role: UserRole;
    readonly businessContextId: string;
    readonly scope: AssignmentScope;
    readonly wasActive: boolean;
    readonly assignedAt: string;
    readonly revokedAt: string;
    readonly revokedBy: string;
    readonly reason?: string;
    readonly notes?: string;
    readonly metadata?: Record<string, unknown>;
  };

  @ApiProperty({
    description: "Informations sur l'op√©ration",
    type: 'object',
    additionalProperties: true,
  })
  readonly operationInfo!: {
    readonly timestamp: string;
    readonly correlationId: string;
    readonly revokedBy: string;
    readonly affectedUser: {
      readonly userId: string;
      readonly email: string;
      readonly name?: string;
    };
    readonly revokedRole: {
      readonly role: UserRole;
      readonly scope: AssignmentScope;
      readonly businessContext: string;
    };
  };
}

/**
 * üìù DTO pour r√©vocation en lot (batch revocation)
 */
export class BatchRevokeRolesDto {
  @ApiProperty({
    description: "Liste des IDs d'assignations √† r√©voquer",
    type: [String],
    example: [
      '456e7890-e89b-12d3-a456-426614174111',
      '567e8901-e89b-12d3-a456-426614174222',
      '678e9012-e89b-12d3-a456-426614174333',
    ],
  })
  @IsNotEmpty({ message: 'La liste des assignations ne peut √™tre vide' })
  @IsUUID('4', {
    each: true,
    message: "Chaque ID d'assignation doit √™tre un UUID valide",
  })
  readonly assignmentIds!: string[];

  @ApiPropertyOptional({
    description: 'Raison commune pour toutes les r√©vocations',
    example: 'Restructuration organisationnelle',
    maxLength: 500,
  })
  @IsOptional()
  @IsString({ message: 'La raison doit √™tre une cha√Æne de caract√®res' })
  @Length(1, 500, { message: 'La raison doit contenir 1 √† 500 caract√®res' })
  readonly reason?: string;

  @ApiPropertyOptional({
    description: 'Notes communes pour toutes les r√©vocations',
    example: 'R√©vocations en lot suite √† la restructuration du d√©partement',
    maxLength: 1000,
  })
  @IsOptional()
  @IsString({ message: 'Les notes doivent √™tre une cha√Æne de caract√®res' })
  @Length(0, 1000, { message: 'Les notes ne peuvent d√©passer 1000 caract√®res' })
  readonly notes?: string;

  @ApiPropertyOptional({
    description: 'M√©tadonn√©es communes pour la r√©vocation en lot',
    type: 'object',
    additionalProperties: true,
    example: {
      batchOperation: true,
      operationType: 'restructuring',
      department: 'IT',
      priority: 'high',
    },
  })
  @IsOptional()
  @IsObject({ message: 'Les m√©tadonn√©es doivent √™tre un objet valide' })
  readonly metadata?: Record<string, unknown>;
}

/**
 * üìä DTO de r√©ponse pour la r√©vocation en lot
 */
export class BatchRevokeRolesResponseDto {
  @ApiProperty({
    description: "Succ√®s de l'op√©ration en lot",
    example: true,
  })
  readonly success!: boolean;

  @ApiProperty({
    description: "R√©sum√© de l'op√©ration en lot",
    type: 'object',
    additionalProperties: true,
  })
  readonly summary!: {
    readonly totalRequested: number;
    readonly successfulRevocations: number;
    readonly failedRevocations: number;
    readonly skippedRevocations: number;
  };

  @ApiProperty({
    description: 'D√©tails des r√©vocations r√©ussies',
    type: 'array',
  })
  readonly successful!: Array<{
    readonly assignmentId: string;
    readonly userId: string;
    readonly role: UserRole;
    readonly scope: AssignmentScope;
    readonly revokedAt: string;
  }>;

  @ApiPropertyOptional({
    description: 'D√©tails des r√©vocations √©chou√©es',
    type: 'array',
  })
  readonly failed?: Array<{
    readonly assignmentId: string;
    readonly error: string;
    readonly errorCode: string;
    readonly userId?: string;
    readonly role?: UserRole;
  }>;

  @ApiPropertyOptional({
    description: 'D√©tails des r√©vocations ignor√©es',
    type: 'array',
  })
  readonly skipped?: Array<{
    readonly assignmentId: string;
    readonly reason: string;
    readonly userId?: string;
    readonly role?: UserRole;
  }>;

  @ApiProperty({
    description: "M√©tadonn√©es de l'op√©ration en lot",
    type: 'object',
    additionalProperties: true,
  })
  readonly operationMeta!: {
    readonly timestamp: string;
    readonly correlationId: string;
    readonly executionTimeMs: number;
    readonly revokedBy: string;
  };
}
