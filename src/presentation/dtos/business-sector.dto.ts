/**
 * üìÑ Business Sector DTOs - Presentation Layer
 *
 * Objets de transfert de donn√©es pour les op√©rations REST des secteurs d'activit√©.
 * Ces DTOs d√©finissent la structure des requ√™tes et r√©ponses HTTP.
 */

import { ApiProperty, ApiPropertyOptional } from "@nestjs/swagger";
import { Transform } from "class-transformer";
import {
  IsBoolean,
  IsIn,
  IsInt,
  IsNotEmpty,
  IsOptional,
  IsString,
  Length,
  Matches,
  Max,
  Min,
} from "class-validator";

/**
 * üìã DTO : Cr√©ation de secteur d'activit√©
 */
export class CreateBusinessSectorDto {
  @ApiProperty({
    description: "Nom du secteur d'activit√©",
    example: "Technologies de l'Information",
    minLength: 2,
    maxLength: 100,
  })
  @IsString({ message: "Le nom doit √™tre une cha√Æne de caract√®res" })
  @IsNotEmpty({ message: "Le nom est obligatoire" })
  @Length(2, 100, { message: "Le nom doit contenir entre 2 et 100 caract√®res" })
  @Matches(/^[a-zA-Z√Ä-√ø0-9\s\-'&.()]+$/, {
    message: "Le nom contient des caract√®res non autoris√©s",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim() : value,
  )
  readonly name!: string;

  @ApiProperty({
    description: "Description d√©taill√©e du secteur d'activit√©",
    example:
      "D√©veloppement logiciel, conseil en syst√®mes informatiques, services cloud",
    minLength: 10,
    maxLength: 500,
  })
  @IsString({ message: "La description doit √™tre une cha√Æne de caract√®res" })
  @IsNotEmpty({ message: "La description est obligatoire" })
  @Length(10, 500, {
    message: "La description doit contenir entre 10 et 500 caract√®res",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim() : value,
  )
  readonly description!: string;

  @ApiProperty({
    description:
      "Code unique du secteur (lettres majuscules, chiffres et underscores)",
    example: "IT_SERVICES",
    minLength: 2,
    maxLength: 20,
  })
  @IsString({ message: "Le code doit √™tre une cha√Æne de caract√®res" })
  @IsNotEmpty({ message: "Le code est obligatoire" })
  @Length(2, 20, { message: "Le code doit contenir entre 2 et 20 caract√®res" })
  @Matches(/^[A-Z][A-Z0-9_]*$/, {
    message:
      "Le code doit commencer par une majuscule et ne contenir que des majuscules, chiffres et underscores",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim().toUpperCase() : value,
  )
  readonly code!: string;
}

/**
 * üìã DTO : Mise √† jour de secteur d'activit√©
 */
export class UpdateBusinessSectorDto {
  @ApiPropertyOptional({
    description: "Nouveau nom du secteur d'activit√©",
    example: "Technologies de l'Information et Communication",
    minLength: 2,
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: "Le nom doit √™tre une cha√Æne de caract√®res" })
  @Length(2, 100, { message: "Le nom doit contenir entre 2 et 100 caract√®res" })
  @Matches(/^[a-zA-Z√Ä-√ø0-9\s\-'&.()]+$/, {
    message: "Le nom contient des caract√®res non autoris√©s",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim() : value,
  )
  readonly name?: string;

  @ApiPropertyOptional({
    description: "Nouvelle description du secteur d'activit√©",
    example:
      "D√©veloppement logiciel, conseil en syst√®mes informatiques, services cloud et t√©l√©communications",
    minLength: 10,
    maxLength: 500,
  })
  @IsOptional()
  @IsString({ message: "La description doit √™tre une cha√Æne de caract√®res" })
  @Length(10, 500, {
    message: "La description doit contenir entre 10 et 500 caract√®res",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim() : value,
  )
  readonly description?: string;
}

/**
 * üìã DTO : Filtres de recherche des secteurs d'activit√©
 */
export class BusinessSectorFiltersDto {
  @ApiPropertyOptional({
    description: "Recherche textuelle dans le nom et la description",
    example: "technologie",
  })
  @IsOptional()
  @IsString({ message: "La recherche doit √™tre une cha√Æne de caract√®res" })
  @Length(1, 100, {
    message: "La recherche doit contenir entre 1 et 100 caract√®res",
  })
  @Transform(({ value }: { value: unknown }) =>
    typeof value === "string" ? value.trim() : value,
  )
  readonly search?: string;

  @ApiPropertyOptional({
    description: "Filtrer par statut actif/inactif",
    example: true,
  })
  @IsOptional()
  @IsBoolean({ message: "isActive doit √™tre un bool√©en" })
  @Transform(({ value }) => {
    if (value === "true") return true;
    if (value === "false") return false;
    return value;
  })
  readonly isActive?: boolean;

  @ApiPropertyOptional({
    description: "Filtrer par codes sp√©cifiques",
    example: ["IT_SERVICES", "CONSULTING"],
    type: [String],
  })
  @IsOptional()
  @IsString({
    each: true,
    message: "Chaque code doit √™tre une cha√Æne de caract√®res",
  })
  @Matches(/^[A-Z][A-Z0-9_]*$/, {
    each: true,
    message: "Chaque code doit √™tre en majuscules avec underscores",
  })
  readonly codes?: string[];
}

/**
 * üìã DTO : Options de tri
 */
export class BusinessSectorSortDto {
  @ApiPropertyOptional({
    description: "Champ de tri",
    example: "name",
    enum: ["name", "code", "createdAt", "updatedAt"],
  })
  @IsOptional()
  @IsString({ message: "Le champ de tri doit √™tre une cha√Æne de caract√®res" })
  @IsIn(["name", "code", "createdAt", "updatedAt"], {
    message: "Le champ de tri doit √™tre : name, code, createdAt ou updatedAt",
  })
  readonly field?: "name" | "code" | "createdAt" | "updatedAt";

  @ApiPropertyOptional({
    description: "Direction du tri",
    example: "ASC",
    enum: ["ASC", "DESC"],
  })
  @IsOptional()
  @IsString({ message: "La direction doit √™tre une cha√Æne de caract√®res" })
  @IsIn(["ASC", "DESC"], {
    message: "La direction doit √™tre ASC ou DESC",
  })
  readonly direction?: "ASC" | "DESC";
}

/**
 * üìã DTO : Options de pagination
 */
export class BusinessSectorPaginationDto {
  @ApiPropertyOptional({
    description: "Num√©ro de page (commence √† 1)",
    example: 1,
    minimum: 1,
  })
  @IsOptional()
  @Transform(({ value }) => parseInt(value))
  @IsInt({ message: "La page doit √™tre un nombre entier" })
  @Min(1, { message: "La page doit √™tre sup√©rieure ou √©gale √† 1" })
  readonly page?: number;

  @ApiPropertyOptional({
    description: "Nombre d'√©l√©ments par page",
    example: 20,
    minimum: 1,
    maximum: 100,
  })
  @IsOptional()
  @Transform(({ value }) => parseInt(value))
  @IsInt({ message: "La limite doit √™tre un nombre entier" })
  @Min(1, { message: "La limite doit √™tre sup√©rieure ou √©gale √† 1" })
  @Max(100, { message: "La limite ne peut pas d√©passer 100" })
  readonly limit?: number;
}

/**
 * üìã DTO : Requ√™te de liste compl√®te
 */
export class ListBusinessSectorsDto {
  @ApiPropertyOptional({
    description: "Options de pagination",
  })
  @IsOptional()
  readonly pagination?: BusinessSectorPaginationDto;

  @ApiPropertyOptional({
    description: "Options de tri",
  })
  @IsOptional()
  readonly sort?: BusinessSectorSortDto;

  @ApiPropertyOptional({
    description: "Filtres de recherche",
  })
  @IsOptional()
  readonly filters?: BusinessSectorFiltersDto;
}

/**
 * üìã DTO : Suppression de secteur d'activit√©
 */
export class DeleteBusinessSectorDto {
  @ApiPropertyOptional({
    description: "Forcer la suppression m√™me si le secteur est utilis√©",
    example: false,
    default: false,
  })
  @IsOptional()
  @IsBoolean({ message: "force doit √™tre un bool√©en" })
  @Transform(({ value }) => {
    if (value === "true") return true;
    if (value === "false") return false;
    return value === true;
  })
  readonly force?: boolean;
}

/**
 * üìÑ DTO : Secteur d'activit√© en r√©ponse
 */
export class BusinessSectorResponseDto {
  @ApiProperty({
    description: "Identifiant unique du secteur",
    example: "uuid-123-456",
  })
  readonly id!: string;

  @ApiProperty({
    description: "Nom du secteur d'activit√©",
    example: "Technologies de l'Information",
  })
  readonly name!: string;

  @ApiProperty({
    description: "Description du secteur d'activit√©",
    example: "D√©veloppement logiciel, conseil en syst√®mes informatiques",
  })
  readonly description!: string;

  @ApiProperty({
    description: "Code unique du secteur",
    example: "IT_SERVICES",
  })
  readonly code!: string;

  @ApiProperty({
    description: "Statut actif/inactif",
    example: true,
  })
  readonly isActive!: boolean;

  @ApiProperty({
    description: "Date de cr√©ation",
    example: "2024-01-01T10:00:00Z",
  })
  readonly createdAt!: Date;

  @ApiProperty({
    description: "Identifiant du cr√©ateur",
    example: "user-uuid-789",
  })
  readonly createdBy!: string;

  @ApiPropertyOptional({
    description: "Date de derni√®re mise √† jour",
    example: "2024-01-15T14:30:00Z",
  })
  readonly updatedAt?: Date;

  @ApiPropertyOptional({
    description: "Identifiant du dernier modificateur",
    example: "user-uuid-456",
  })
  readonly updatedBy?: string;
}

/**
 * üìä DTO : M√©tadonn√©es de pagination
 */
export class BusinessSectorPaginationMetaDto {
  @ApiProperty({
    description: "Page courante",
    example: 1,
  })
  readonly currentPage!: number;

  @ApiProperty({
    description: "Nombre total de pages",
    example: 5,
  })
  readonly totalPages!: number;

  @ApiProperty({
    description: "Nombre total d'√©l√©ments",
    example: 95,
  })
  readonly totalItems!: number;

  @ApiProperty({
    description: "Nombre d'√©l√©ments par page",
    example: 20,
  })
  readonly itemsPerPage!: number;

  @ApiProperty({
    description: "Indique s'il y a une page suivante",
    example: true,
  })
  readonly hasNextPage!: boolean;

  @ApiProperty({
    description: "Indique s'il y a une page pr√©c√©dente",
    example: false,
  })
  readonly hasPrevPage!: boolean;
}

/**
 * üìã DTO : R√©ponse de liste de secteurs d'activit√©
 */
export class ListBusinessSectorsResponseDto {
  @ApiProperty({
    description: "Liste des secteurs d'activit√©",
    type: [BusinessSectorResponseDto],
  })
  readonly data!: BusinessSectorResponseDto[];

  @ApiProperty({
    description: "M√©tadonn√©es de pagination",
    type: BusinessSectorPaginationMetaDto,
  })
  readonly meta!: BusinessSectorPaginationMetaDto;
}

/**
 * üìã DTO : R√©ponse de cr√©ation
 */
export class CreateBusinessSectorResponseDto {
  @ApiProperty({
    description: "Indique le succ√®s de l'op√©ration",
    example: true,
  })
  readonly success!: boolean;

  @ApiProperty({
    description: "Message de confirmation",
    example: "Business sector created successfully",
  })
  readonly message!: string;

  @ApiProperty({
    description: "Secteur d'activit√© cr√©√©",
    type: BusinessSectorResponseDto,
  })
  readonly data!: BusinessSectorResponseDto;
}

/**
 * üìã DTO : R√©ponse de mise √† jour
 */
export class UpdateBusinessSectorResponseDto {
  @ApiProperty({
    description: "Indique le succ√®s de l'op√©ration",
    example: true,
  })
  readonly success!: boolean;

  @ApiProperty({
    description: "Message de confirmation",
    example: "Business sector updated successfully",
  })
  readonly message!: string;

  @ApiProperty({
    description: "Secteur d'activit√© mis √† jour",
    type: BusinessSectorResponseDto,
  })
  readonly data!: BusinessSectorResponseDto;
}

/**
 * üìã DTO : R√©ponse de suppression
 */
export class DeleteBusinessSectorResponseDto {
  @ApiProperty({
    description: "Indique le succ√®s de l'op√©ration",
    example: true,
  })
  readonly success!: boolean;

  @ApiProperty({
    description: "Message de confirmation",
    example: "Business sector deactivated successfully",
  })
  readonly message!: string;

  @ApiProperty({
    description: "Date de suppression/d√©sactivation",
    example: "2024-01-15T14:30:00Z",
  })
  readonly deletedAt!: Date;

  @ApiProperty({
    description: "Identifiant du secteur supprim√©",
    example: "uuid-123-456",
  })
  readonly sectorId!: string;

  @ApiProperty({
    description: "Nom du secteur supprim√©",
    example: "Technologies de l'Information",
  })
  readonly sectorName!: string;

  @ApiPropertyOptional({
    description: "Indique si la suppression a √©t√© forc√©e",
    example: false,
  })
  readonly wasForced?: boolean;
}
