/**
 * üóÑÔ∏è MIGRATION TYPEORM - Role Assignment Table
 *
 * PLAN DE MIGRATION S√âCURIS√â
 *
 * üéØ OBJECTIF : Cr√©er la table role_assignments pour le syst√®me RBAC
 *
 * üìä DONN√âES EXISTANTES :
 * - Nouvelle table, aucune donn√©e existante
 * - Pas d'impact sur les tables existantes
 *
 * üõ°Ô∏è MESURES DE S√âCURIT√â :
 * - V√©rification d'existence avant cr√©ation
 * - Index optimis√©s pour les requ√™tes fr√©quentes
 * - Constraints appropri√©es pour l'int√©grit√©
 * - Support UUID natif PostgreSQL
 *
 * ‚ö†Ô∏è RISQUES IDENTIFI√âS :
 * - Aucun (nouvelle table)
 * - Migration r√©versible compl√®te
 *
 * ‚úÖ TESTS EFFECTU√âS :
 * - Migration test√©e en d√©veloppement
 * - Rollback v√©rifi√© et fonctionnel
 * - Performance des index valid√©e
 */

import { MigrationInterface, QueryRunner, Table } from "typeorm";

export class CreateRoleAssignmentTable1727289600000
  implements MigrationInterface
{
  name = "CreateRoleAssignmentTable1727289600000";

  private getSchemaName(): string {
    const schema = process.env.DB_SCHEMA || "public";

    // Validation du nom de sch√©ma (s√©curit√©)
    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(schema)) {
      throw new Error(`Invalid schema name: ${schema}`);
    }

    return schema;
  }

  public async up(queryRunner: QueryRunner): Promise<void> {
    const schema = this.getSchemaName();
    const tableName = `${schema}.role_assignments`;

    // üîç V√©rifier que la table n'existe pas d√©j√†
    const tableExists = await queryRunner.hasTable(tableName);
    if (tableExists) {
      console.log(`Table ${tableName} already exists, skipping creation`);
      return;
    }

    // ‚úÖ Cr√©er la table role_assignments
    await queryRunner.createTable(
      new Table({
        name: `${schema}.role_assignments`,
        columns: [
          // üÜî Identification primaire
          {
            name: "id",
            type: "uuid",
            isPrimary: true,
            generationStrategy: "uuid",
            default: "uuid_generate_v4()",
            comment: "Identifiant unique de l'assignation de r√¥le",
          },

          // üë§ Assignation utilisateur et r√¥le
          {
            name: "user_id",
            type: "uuid",
            isNullable: false,
            comment: "UUID de l'utilisateur assign√©",
          },
          {
            name: "role",
            type: "varchar",
            length: "50",
            isNullable: false,
            comment: "R√¥le assign√© (enum UserRole)",
          },

          // üè¢ Contexte m√©tier hi√©rarchique
          {
            name: "business_id",
            type: "uuid",
            isNullable: false,
            comment: "UUID du business (niveau racine)",
          },
          {
            name: "location_id",
            type: "uuid",
            isNullable: true,
            comment: "UUID de la location (niveau interm√©diaire)",
          },
          {
            name: "department_id",
            type: "uuid",
            isNullable: true,
            comment: "UUID du d√©partement (niveau feuille)",
          },
          {
            name: "assignment_scope",
            type: "varchar",
            length: "20",
            isNullable: false,
            comment:
              "√âtendue de l'assignation (BUSINESS, LOCATION, DEPARTMENT)",
          },

          // ‚è∞ Gestion temporelle
          {
            name: "assigned_at",
            type: "timestamp with time zone",
            isNullable: false,
            default: "CURRENT_TIMESTAMP",
            comment: "Date d'assignation du r√¥le",
          },
          {
            name: "expires_at",
            type: "timestamp with time zone",
            isNullable: true,
            comment: "Date d'expiration (nullable = permanent)",
          },
          {
            name: "is_active",
            type: "boolean",
            isNullable: false,
            default: true,
            comment: "Status actif/inactif de l'assignation",
          },

          // üìù M√©tadonn√©es business
          {
            name: "notes",
            type: "text",
            isNullable: true,
            comment: "Notes sur l'assignation",
          },
          {
            name: "metadata",
            type: "jsonb",
            isNullable: true,
            comment: "M√©tadonn√©es flexibles en JSON",
          },

          // üë• Audit trail - Tra√ßabilit√© obligatoire
          {
            name: "assigned_by",
            type: "uuid",
            isNullable: false,
            comment: "UUID de l'utilisateur qui a fait l'assignation",
          },
          {
            name: "created_by",
            type: "uuid",
            isNullable: false,
            comment: "UUID de l'utilisateur cr√©ateur",
          },
          {
            name: "updated_by",
            type: "uuid",
            isNullable: false,
            comment: "UUID du dernier utilisateur modificateur",
          },

          // ‚è±Ô∏è Timestamps automatiques
          {
            name: "created_at",
            type: "timestamp with time zone",
            isNullable: false,
            default: "CURRENT_TIMESTAMP",
            comment: "Date de cr√©ation",
          },
          {
            name: "updated_at",
            type: "timestamp with time zone",
            isNullable: false,
            default: "CURRENT_TIMESTAMP",
            comment: "Date de derni√®re modification",
          },

          // üîÑ Versioning et m√©tadonn√©es techniques
          {
            name: "version",
            type: "integer",
            isNullable: false,
            default: 1,
            comment: "Version pour optimistic locking",
          },
          {
            name: "assignment_source",
            type: "varchar",
            length: "50",
            isNullable: false,
            default: "'MANUAL'",
            comment: "Source de l'assignation (MANUAL, AUTOMATED, IMPORTED)",
          },
          {
            name: "priority_level",
            type: "integer",
            isNullable: false,
            default: 0,
            comment: "Niveau de priorit√© pour r√©solution des conflits",
          },
        ],
      }),
      true, // ifNotExists
    );

    // üìä Index pour les requ√™tes fr√©quentes
    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_user_business"
      ON "${schema}"."role_assignments" ("user_id", "business_id")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_user_business_location"
      ON "${schema}"."role_assignments" ("user_id", "business_id", "location_id")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_user_business_location_dept"
      ON "${schema}"."role_assignments" ("user_id", "business_id", "location_id", "department_id")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_role_business"
      ON "${schema}"."role_assignments" ("role", "business_id")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_active_expires"
      ON "${schema}"."role_assignments" ("is_active", "expires_at")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_role_assignments_scope"
      ON "${schema}"."role_assignments" ("assignment_scope")
    `);

    // ‚úÖ Contraintes de validation m√©tier
    await queryRunner.query(`
      ALTER TABLE "${schema}"."role_assignments"
      ADD CONSTRAINT "CHK_role_assignments_valid_role"
      CHECK ("role" IN ('SUPER_ADMIN', 'ADMIN', 'MANAGER', 'STAFF', 'USER'))
    `);

    await queryRunner.query(`
      ALTER TABLE "${schema}"."role_assignments"
      ADD CONSTRAINT "CHK_role_assignments_valid_scope"
      CHECK ("assignment_scope" IN ('BUSINESS', 'LOCATION', 'DEPARTMENT'))
    `);

    await queryRunner.query(`
      ALTER TABLE "${schema}"."role_assignments"
      ADD CONSTRAINT "CHK_role_assignments_valid_source"
      CHECK ("assignment_source" IN ('MANUAL', 'AUTOMATED', 'IMPORTED', 'INHERITED'))
    `);

    // ‚ö†Ô∏è Contraintes de coh√©rence hi√©rarchique
    await queryRunner.query(`
      ALTER TABLE "${schema}"."role_assignments"
      ADD CONSTRAINT "CHK_role_assignments_dept_requires_location"
      CHECK ("department_id" IS NULL OR "location_id" IS NOT NULL)
    `);

    await queryRunner.query(`
      ALTER TABLE "${schema}"."role_assignments"
      ADD CONSTRAINT "CHK_role_assignments_scope_consistency"
      CHECK (
        ("assignment_scope" = 'BUSINESS' AND "location_id" IS NULL AND "department_id" IS NULL) OR
        ("assignment_scope" = 'LOCATION' AND "location_id" IS NOT NULL AND "department_id" IS NULL) OR
        ("assignment_scope" = 'DEPARTMENT' AND "location_id" IS NOT NULL AND "department_id" IS NOT NULL)
      )
    `);

    // üìù Commentaires sur la table
    await queryRunner.query(`
      COMMENT ON TABLE "${schema}"."role_assignments" IS
      'Table des assignations de r√¥les RBAC avec contexte hi√©rarchique m√©tier'
    `);

    console.log(
      `‚úÖ Table ${tableName} created successfully with all indexes and constraints`,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    const schema = this.getSchemaName();
    const tableName = `${schema}.role_assignments`;

    // üîç V√©rifier que la table existe avant suppression
    const tableExists = await queryRunner.hasTable(tableName);
    if (!tableExists) {
      console.log(`Table ${tableName} does not exist, skipping deletion`);
      return;
    }

    // ‚ö†Ô∏è SAUVEGARDER les donn√©es si elles existent (optionnel mais recommand√©)
    const dataCount = await queryRunner.query(`
      SELECT COUNT(*) as count FROM "${schema}"."role_assignments"
    `);

    if (dataCount[0]?.count > 0) {
      console.log(
        `‚ö†Ô∏è WARNING: Dropping table with ${dataCount[0].count} records. Consider backup if needed.`,
      );

      // Cr√©er une table de sauvegarde (optionnel)
      await queryRunner.query(`
        CREATE TABLE IF NOT EXISTS "${schema}"."role_assignments_backup_${Date.now()}" AS
        SELECT * FROM "${schema}"."role_assignments"
      `);
    }

    // üóëÔ∏è Supprimer la table (les index et contraintes sont supprim√©s automatiquement)
    await queryRunner.dropTable(`${schema}.role_assignments`, true);

    console.log(`‚úÖ Table ${tableName} dropped successfully`);
  }
}
