import { Module, DynamicModule } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';

// Modules sp√©cialis√©s
import { DatabaseSqlModule } from './database-sql.module';

// Services
import { DatabaseConfigService } from '../config/database-config.service';
import { DatabaseType } from '../../application/ports/database-config.port';

// Tokens
import { DATABASE_CONFIG_SERVICE } from '../../application/ports/database-config.port';

/**
 * üîÄ Module Base de Donn√©es S√©lecteur (SQL OU NoSQL)
 *
 * **Responsabilit√©** : S√©lection dynamique SQL OU NoSQL selon DATABASE_TYPE
 *
 * **Architecture** :
 * - ‚úÖ Configuration exclusive : SOIT SQL SOIT NoSQL
 * - ‚úÖ D√©l√©gation vers modules sp√©cialis√©s
 * - ‚úÖ Pas de m√©lange - choix au d√©marrage de l'application
 *
 * **Variables d'Environnement** :
 * - `DATABASE_TYPE`: 'sql' | 'nosql' (d√©faut: 'sql')
 *
 * **Patterns Impl√©ment√©s** :
 * - Factory Pattern pour s√©lection de module
 * - Strategy Pattern exclusif
 * - Delegation Pattern vers modules sp√©cialis√©s
 */
@Module({})
export class DatabaseHybridModule {
  /**
   * Configure dynamiquement SOIT SQL SOIT NoSQL selon DATABASE_TYPE
   */
  static async forRootAsync(): Promise<DynamicModule> {
    // D√©terminer le type de base de donn√©es
    const databaseType = process.env.DATABASE_TYPE?.toLowerCase() || 'sql';

    // S√©lectionner le module SQL uniquement
    const selectedModule = DatabaseSqlModule.forRootAsync();

    return {
      module: DatabaseHybridModule,
      imports: [
        ConfigModule,
        selectedModule, // Import du module s√©lectionn√© uniquement
      ],
      providers: [
        // Configuration Service global
        DatabaseConfigService,
        {
          provide: DATABASE_CONFIG_SERVICE,
          useClass: DatabaseConfigService,
        },
      ],
      exports: [DATABASE_CONFIG_SERVICE],
      global: true,
    };
  }
}
