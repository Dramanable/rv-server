services:
  # 🚀 NestJS Application - Development Mode
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-dev
    restart: unless-stopped

    # 🔧 Development resource allocation - Increased for TypeScript compilation
    mem_limit: 4g
    mem_reservation: 2g
    cpus: '2.0'    # 🔗 Service dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    # 🌍 Environment configuration
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true  # For hot reload in Docker
      - NODE_OPTIONS=--max-old-space-size=3072  # 3GB heap for TypeScript compilation

    # 🚪 Port mapping
    ports:
      - "3000:3000"      # Application
      - "9229:9229"      # Debug port

    # 📁 Development volumes - CONFIGURATION PROPRE
    volumes:
      # Code source - hot reload
      - ./src:/app/src
      - ./test:/app/test
      - ./templates:/app/templates

      # Configuration - lecture seule
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./tsconfig.build.json:/app/tsconfig.build.json:ro
      - ./nest-cli.json:/app/nest-cli.json:ro
      - ./.env:/app/.env:ro

      # Volumes nommés pour éviter les conflits
      - node_modules_volume:/app/node_modules

    # 🌐 Network
    networks:
      - app-network

    # 🏥 Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s



  # 🗄️ PostgreSQL Database - Development
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 256m
    mem_reservation: 128m
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=192MB
      -c maintenance_work_mem=16MB
      -c work_mem=2MB
      -c max_connections=50
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network



  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 128m
    mem_reservation: 64m
    env_file:
      - .env
    command: >
      redis-server
      --maxmemory 96mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 128m
    mem_reservation: 64m
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  node_modules_volume:
    driver: local

networks:
  app-network:
    driver: bridge
