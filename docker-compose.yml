services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 512m
    mem_reservation: 256m
    cpus: '0.5'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "3000:3000"
      - "9229:9229"
    volumes:
      # 🔄 Hot reload - Source code
      - ./src:/app/src:cached
      - ./package.json:/app/package.json:cached
      - ./package-lock.json:/app/package-lock.json:cached
      - ./tsconfig.json:/app/tsconfig.json:cached
      - ./tsconfig.build.json:/app/tsconfig.build.json:cached
      - ./nest-cli.json:/app/nest-cli.json:cached
      - ./.env:/app/.env:cached
      
      # 🎯 Performance - Cache node_modules to avoid reinstall
      - node_modules_cache:/app/node_modules
      
      # 📁 Development files
      - ./test:/app/test:cached
      - ./.eslintrc.js:/app/.eslintrc.js:cached
      - ./.prettierrc:/app/.prettierrc:cached
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 256m
    mem_reservation: 128m
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres 
      -c shared_buffers=64MB
      -c effective_cache_size=192MB
      -c maintenance_work_mem=16MB
      -c work_mem=2MB
      -c max_connections=50
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongo:7-jammy
    container_name: mongodb
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 256m
    mem_reservation: 128m
    env_file:
      - .env
    command: >
      mongod 
      --wiredTigerCacheSizeGB 0.1
      --wiredTigerCollectionBlockCompressor snappy
      --quiet
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 128m
    mem_reservation: 64m
    env_file:
      - .env
    command: >
      redis-server 
      --maxmemory 96mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    # 🎯 Memory optimization
    mem_limit: 128m
    mem_reservation: 64m
    env_file:
      - .env
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 🧪 Service pour les tests d'intégration
  test-integration:
    image: server-app:latest
    container_name: integration-tests
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rvserver_dev
      - REDIS_URL=redis://:redis123@redis:6379
      - JWT_SECRET=super-secret-jwt-key-for-integration-tests-only
    volumes:
      - ./src:/app/src:cached
      - ./package.json:/app/package.json:cached
      - ./tsconfig.json:/app/tsconfig.json:cached
      - ./jest.integration.config.js:/app/jest.integration.config.js:cached
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: npm run test:integration
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  node_modules_cache:
    driver: local

networks:
  app-network:
    driver: bridge
